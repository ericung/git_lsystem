link strings

procedure generate(str,rules)
	retstr := ""
	str ? {
		while (c := move(1)) do {
			retstr ||:= rules[c]
		}
	}

	return retstr
end

procedure findmax(str1,str2)
	if (*str1 > *str2) then {
		return str1
	}
	return str2
end

procedure longsubstr(str1,str2)
	m := *str1
	n := *str2
	l := table()
	every(i := 0 to m) do{
		l[i] :=  table()
		l[i][0] := 0
	}	
	every(i := 0 to n)do{
		l[0][i] := 0
	}

	z := 0
	ret := ""
	every(i := 1 to m) do {
		every(j := 1 to n) do {
			if (str1[i]==str2[j]) then{
				if ((i==1)|(j==1))then{
					l[i][j] := 1
				} else {
					l[i][j] := l[i-1][j-1]+1
				}
				if (l[i][j] > z) then{
					z := l[i][j]
					ret := str1[i-z+1:i+1]
				}
			} else {
				l[i][j] := 0
			}
		}
	}	
	return ret
end

procedure downtotwo(image1, image2)
	item := ""

	if (findmax(image1,image2) == image2) then {
		item := image1
		image1 := image2
		image2 := item
	}

	long := longsubstr(image1,image2)
	#1del := deletes(image2,long)
	del := long
	write(image1, "\t",image2,"\t",del)
	if (*del == 1) then {
		write ("first rule: ", image2)
		write ("second rule: ", del)
	} else {
		write(long, "\t",image2)
		downtotwo(image2,del)
	}
	
end

procedure main()
	rules := table()
	gen := table()
	rules["a"] := "aba"
	rules["b"] := "a"
	axiom := "ba"
	gen[0] := axiom 
	write("starting: ", axiom)
	every (i := 1 to 10) do{ 
		gen[i] := generate(gen[i-1],rules)
	} 
	
	write("\n",gen[5], "\n\n",gen[4], "\n")
	write("negating: ", downtotwo(gen[6], gen[5]))
#	write("gc",gc := longsubstr(gen[2],gen[1]))
#	write(deletes(gen[2],gc))
end
